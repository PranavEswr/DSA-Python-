***** Notes *****
- Here I am going for a DFS(Depth First Search) approach 
- If DFS is taken from root of tree, it might lead to multiple comparisons across the subtrees, leading to O(N^2) complexity
- So do the DFS from the last to root 

***** Solution *****
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def dfs(root):
            if not root:
                return [True, 0]

            left, right = dfs(root.left), dfs(root.right)
            balanced = left[0] and right[0] and abs(left[1] - right[1] <= 1)
            return [balanced, 1 + max(left[1], right[1])]
        return dfs(root)[0]
